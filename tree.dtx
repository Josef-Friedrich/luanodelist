% \iffalse meta-comment
%
% Copyright (C) 2015 by Josef Friedrich <josef@friedrich.rocks>
% ----------------------------------------------------------------------
% This work may be distributed and/or modified under the conditions of
% the LaTeX Project Public License, either version 1.3 of this license
% or (at your option) any later version.  The latest version of this
% license is in:
%
%   http://www.latex-project.org/lppl.txt
%
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% This work has the LPPL maintenance status `maintained'.
%
% The Current Maintainer of this work is Josef Friedrich.
%
% This work consists of the files tree.dtx and tree.ins
% and the derived filebase tree.sty and tree.lua.
%
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{tree.dtx}
%</driver>
%<package>\NeedsTeXFormat{LaTeX2e}[1999/12/01]
%<package>\ProvidesPackage{tree}
%<*package>
    [2015/11/13 Package to debug node lists used by LuaTeX]
%</package>
%<*driver>
\documentclass{ltxdoc}
\usepackage{hyperref,paralist}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}

\providecommand*{\url}{\texttt}
\GetFileInfo{tree.dtx}
\title{The \textsf{tree} package}
\author{%
  Josef Friedrich\\%
  \url{josef@friedrich.rocks}\\%
  \href{https://github.com/Josef-Friedrich/cloze}{github.com/Josef-Friedrich/tree}%
}
\date{\fileversion~from \filedate}

\maketitle

\tableofcontents

\section{Option 'channel'}

Value "term"


\begin{verbatim}
\usepackage[channel=term]{tree}
\end{verbatim}

Value "log"

\begin{verbatim}
\usepackage[channel=log]{tree}
\end{verbatim}

Value "term and log"

\begin{verbatim}
\usepackage[channel={term and log}]{tree}
\end{verbatim}

  \DocInput{tree.dtx}
  \pagebreak
  \PrintChanges
  \pagebreak
  \PrintIndex
\end{document}
%</driver>
%<*readme>
# tree

Inspired by a [gist of Patrick Gundlach](https://gist.github.com/pgundlach/556247).

`tree` displays some debug informations of the node list in the
terminal, when you render a Latex document.

```
post_linebreak_filter:
│
├─GLUE subtype: baselineskip; width: 5.06pt;
└─HLIST subtype: line; width: 345pt; height: 6.94pt; dir: TLT; glue_order: 2; glue_sign: 1; glue_set: 304.99993896484;
 ╚═head:
  ├─LOCAL_PAR dir: TLT;
  ├─HLIST subtype: indent; width: 15pt; dir: TLT;
  ├─GLYPH char: "O"; font: 15; left: 2; right: 3; uchyph: 1; width: 7.78pt; height: 6.83pt;
  ├─DISC subtype: regular; penalty: 50;
  │ ╠═post:
  │ ║ └─GLYPH subtype: ghost; char: "\12"; font: 15; width: 5.56pt; height: 6.94pt;
  │ ║  ╚═components:
  │ ║   ├─GLYPH subtype: ligature; char: "f"; font: 15; left: 2; right: 3; uchyph: 1; width: 3.06pt; height: 6.94pt;
  │ ║   └─GLYPH subtype: ligature; char: "i"; font: 15; left: 2; right: 3; uchyph: 1; width: 2.78pt; height: 6.68pt;
  │ ╠═pre:
  │ ║ ├─GLYPH char: "f"; font: 15; left: 2; right: 3; uchyph: 1; width: 3.06pt; height: 6.94pt;
  │ ║ └─GLYPH char: "-"; font: 15; left: 2; right: 3; uchyph: 1; width: 3.33pt; height: 4.31pt;
  │ ╚═replace:
  │  └─GLYPH subtype: ghost; char: "\14"; font: 15; width: 8.33pt; height: 6.94pt;
  │   ╚═components:
  │    ├─GLYPH subtype: ghost; char: "\11"; font: 15; width: 5.83pt; height: 6.94pt;
  │    │ ╚═components:
  │    │  ├─GLYPH subtype: ligature; char: "f"; font: 15; left: 2; right: 3; uchyph: 1; width: 3.06pt; height: 6.94pt;
  │    │  └─GLYPH subtype: ligature; char: "f"; font: 15; left: 2; right: 3; uchyph: 1; width: 3.06pt; height: 6.94pt;
  │    └─GLYPH subtype: ligature; char: "i"; font: 15; left: 2; right: 3; uchyph: 1; width: 2.78pt; height: 6.68pt;
  ├─GLYPH char: "c"; font: 15; left: 2; right: 3; uchyph: 1; width: 4.44pt; height: 4.31pt;
  ├─GLYPH char: "e"; font: 15; left: 2; right: 3; uchyph: 1; width: 4.44pt; height: 4.31pt;
  ├─PENALTY penalty: 10000;
  ├─GLUE subtype: parfillskip; stretch: 65536; stretch_order: 2;
  └─GLUE subtype: rightskip;

```

# UTF8 Box drawing symbols

## Light

```
│ │
│ ├─┤field1: 1pt├┤field2: 1pt│
│ └─
└─
```

## Heavy

```
┃ ┃
┃ ┣━┫field1: 1pt┣┫field2: 1pt┃
┃ ┗━
┗━
```

## Double

```
║ ║
║ ╠═╣field1: 1pt╠╣field2: 1pt║
║ ╚═
╚═
```

%</readme>
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \changes{v0.1}{2015/06/16}{Converted to DTX file}
% \changes{v1.0}{2015/07/08}{Inital release}
%
% \DoNotIndex{\newcommand,\newenvironment,\def,\directlua}
%
% \StopEventually{}
% \pagebreak
% \section{Implementation}
%
% \iffalse
%<*tex>
% \fi
% \MacroTopsep = 10pt plus 2pt minus 2pt
% \MacrocodeTopsep = 10pt plus 1.2pt minus 1pt
% \makeatletter
% \c@CodelineNo 25 \relax
% \makeatother
%
% \subsection{The file \tt{tree.tex}}
%
%    \begin{macrocode}
\directlua{
  options = {}
}
\def\treeoption[#1]#2{
  \directlua{
    options['#1'] = '#2'
  }
}
\def\treeprocessoptions{
  \directlua{
    tree.set_options(options)
  }
}
\directlua{
  tree = require("tree")
  tree.set_options()
  tree.execute()
}
%    \end{macrocode}
%
% \iffalse
%</tex>
%<*package>
% \fi
% \makeatletter
% \c@CodelineNo 25 \relax
% \makeatother
%
% \subsection{The file \tt{tree.sty}}
%
%    \begin{macrocode}
\RequirePackage{kvoptions}
%    \end{macrocode}
%
%    \begin{macrocode}
\SetupKeyvalOptions{
  family=TREE,
  prefix=TREE@
}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareStringOption[term and log]{channel}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareStringOption[postlinebreak]{callback}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareStringOption[1]{verbosity}
%    \end{macrocode}
%
%    \begin{macrocode}
\ProcessKeyvalOptions*
%    \end{macrocode}
%
%    \begin{macrocode}
\newcommand{\treeset}[1]{\setkeys{TREE}{#1}}
%    \end{macrocode}
%
%    \begin{macrocode}
\directlua{
  local options = {}
  options.verbosity = tonumber(\TREE@verbosity)
  options.channel = '\TREE@channel'
  options.callback = '\TREE@callback'
  options.engine = 'lualatex'

  tree = require("tree")
  tree.set_options(options)
  tree.execute()
}
%    \end{macrocode}
%
% \iffalse
%</package>
%<*luamain>
% \fi
%
% \makeatletter
% \c@CodelineNo 0 \relax
% \makeatother
%
% \subsection{The file \tt{tree.lua}}
%
%
%    \begin{macrocode}
local nodex = {}
%    \end{macrocode}
%
%    \begin{macrocode}
local template = {}
%    \end{macrocode}
%
%    \begin{macrocode}
local tree = {}
%    \end{macrocode}
%
% Nodes in Lua\TeX are connected. The tree view distinguishs betweens
% the |list| and |field| connections.

% \begin{itemize}
%  \item |list|: Nodes, which are double connected by |next| and
%        |previous| fields.
%  \item |field|: Connections to nodes by other fields than |next| and
%        |previous| fields, e. g. |head|, |pre|.
% \end{itemize}
%
% The lua table named |tree| holds states values for the present tree
% item.
% \begin{verbatim}
%  tree:
%    - 1:
%      - list: continue
%      - field: stop
%    - 2:
%      - list: continue
%      - field: stop
% \end{verbatim}
%    \begin{macrocode}
tree.state = {}
%    \end{macrocode}
%
%    \begin{macrocode}
local base = {}
%    \end{macrocode}
%
%    \begin{macrocode}
local options = {}
%    \end{macrocode}
%
% \subsubsection{nodex --- node extended}
%
% Get the node id form, e. g.:
% \begin{verbatim}
% <node    nil <    172 >    nil : hlist 2>
% \end{verbatim}
%    \begin{macrocode}
function nodex.node_id(n)
  return string.gsub(tostring(n), '^<node%s+%S+%s+<%s+(%d+).*', '%1')
end
%    \end{macrocode}
%
%    \begin{macrocode}
function nodex.subtype(n)
  local typ = node.type(n.id)

  local subtypes = {
%    \end{macrocode}
% \paragraph{hlist (0)}
%    \begin{macrocode}
    hlist = {
      [0] = 'unknown',
      [1] = 'line',
      [2] = 'box',
      [3] = 'indent',
      [4] = 'alignment',
      [5] = 'cell',
      [6] = 'equation',
      [7] = 'equationnumber',
    },
%    \end{macrocode}
% \paragraph{vlist (1)}
%    \begin{macrocode}
    vlist = {
      [0] = 'unknown',
      [4] = 'alignment',
      [5] = 'cell',
    },
%    \end{macrocode}
% \paragraph{rule (2)}
%    \begin{macrocode}
    rule = {
      [0] = 'unknown',
      [1] = 'box',
      [2] = 'image',
      [3] = 'empty',
      [4] = 'user',
    },
%    \end{macrocode}
%
% \noindent
% Nodes without subtypes:
% \begin{compactitem}
% \item ins (3)
% \item mark (4)
% \end{compactitem}
%    \begin{macrocode}
%    \end{macrocode}
% \paragraph{adjust (5)}
%    \begin{macrocode}
    adjust = {
      [0] = 'normal',
      [1] = 'pre',
    },
%    \end{macrocode}
% \paragraph{boundary (6)}
%    \begin{macrocode}
    boundary = {
      [0] = 'cancel',
      [1] = 'user',
      [2] = 'protrusion',
      [3] = 'word',
    },
%    \end{macrocode}
% \paragraph{disc (7)}
%    \begin{macrocode}
    disc  = {
      [0] = 'discretionary',
      [1] = 'explicit',
      [2] = 'automatic',
      [3] = 'regular',
      [4] = 'first',
      [5] = 'second',
    },
%    \end{macrocode}
%
% \noindent
% Nodes without subtypes:
% \begin{compactitem}
% \item whatsit (8)
% \item local\_par (9)
% \item dir (10)
% \end{compactitem}
%
% \paragraph{math (11)}
%    \begin{macrocode}
    math = {
      [0] = 'beginmath',
      [1] = 'endmath',
    },
%    \end{macrocode}
% \paragraph{glue (12)}
%    \begin{macrocode}
    glue = {
      [0]   = 'userskip',
      [1]   = 'lineskip',
      [2]   = 'baselineskip',
      [3]   = 'parskip',
      [4]   = 'abovedisplayskip',
      [5]   = 'belowdisplayskip',
      [6]   = 'abovedisplayshortskip',
      [7]   = 'belowdisplayshortskip',
      [8]   = 'leftskip',
      [9]   = 'rightskip',
      [10]  = 'topskip',
      [11]  = 'splittopskip',
      [12]  = 'tabskip',
      [13]  = 'spaceskip',
      [14]  = 'xspaceskip',
      [15]  = 'parfillskip',
      [16]  = 'mathskip',
      [17]  = 'thinmuskip',
      [18]  = 'medmuskip',
      [19]  = 'thickmuskip',
      [98]  = 'conditionalmathskip',
      [99]  = 'muglue',
      [100] = 'leaders',
      [101] = 'cleaders',
      [102] = 'xleaders',
      [103] = 'gleaders',
    },
%    \end{macrocode}
% \paragraph{kern (13)}
%    \begin{macrocode}
    kern = {
      [0] = 'fontkern',
      [1] = 'userkern',
      [2] = 'accentkern',
      [3] = 'italiccorrection',
    },
%    \end{macrocode}
%
% \noindent
% Nodes without subtypes:
% \begin{compactitem}
% \item penalty (14)
% \item unset (15)
% \item style (16)
% \item choice (17)
% \end{compactitem}
%
% \paragraph{noad (18)}
%    \begin{macrocode}
    noad = {
      [0] = 'ord',
      [1] = 'opdisplaylimits',
      [2] = 'oplimits',
      [3] = 'opnolimits',
      [4] = 'bin',
      [5] = 'rel',
      [6] = 'open',
      [7] = 'close',
      [8] = 'punct',
      [9] = 'inner',
      [10] = 'under',
      [11] = 'over',
      [12] = 'vcenter',
    },
%    \end{macrocode}
% \paragraph{radical (19)}
%    \begin{macrocode}
    radical = {
      [0] = 'radical',
      [1] = 'uradical',
      [2] = 'uroot',
      [3] = 'uunderdelimiter',
      [4] = 'uoverdelimiter',
      [5] = 'udelimiterunder',
      [6] = 'udelimiterover',
    },
%    \end{macrocode}
%
% \noindent
% Nodes without subtypes:
% \begin{compactitem}
% \item fraction (20)
% \end{compactitem}
%
% \paragraph{accent (21)}
%    \begin{macrocode}
    accent = {
      [0] = 'bothflexible',
      [1] = 'fixedtop',
      [2] = 'fixedbottom',
      [3] = 'fixedboth',
    },
%    \end{macrocode}
% \paragraph{fence (22)}
%    \begin{macrocode}
    fence = {
      [0] = 'unset',
      [1] = 'left',
      [2] = 'middle',
      [3] = 'right',
    },
%    \end{macrocode}
%
% \noindent
% Nodes without subtypes:
% \begin{compactitem}
% \item math\_char (23)
% \item sub\_box (24)
% \item sub\_mlist (25)
% \item math\_text\_char (26)
% \item delim (27)
% \item margin\_kern (28)
% \end{compactitem}
%
% \paragraph{glyph (29)}
%    \begin{macrocode}
    glyph = {
      [0] = 'character',
      [1] = 'ligature',
      [2] = 'ghost',
      [3] = 'left',
      [4] = 'right',
    },
%    \end{macrocode}
%
% \noindent
% Nodes without subtypes:
% \begin{compactitem}
% \item align\_record (30)
% \item pseudo\_file (31)
% \item pseudo\_line (32)
% \item page\_insert (33)
% \item split\_insert (34)
% \item expr\_stack (35)
% \item nested\_list (36)
% \item span (37)
% \item attribute (38)
% \item glue\_spec (39)
% \item attribute\_list (40)
% \item temp (41)
% \item align\_stack (42)
% \item movement\_stack (43)
% \item if\_stack (44)
% \item unhyphenated (45)
% \item hyphenated (46)
% \item delta (47)
% \item passive (48)
% \item shape (49)
% \end{compactitem}
%    \begin{macrocode}
  }

  subtypes.whatsit = node.whatsits()

  local out = ''
  if subtypes[typ] and subtypes[typ][n.subtype] then
    out = subtypes[typ][n.subtype]

    if options.verbosity > 1 then
      out = out .. template.type_id(n.subtype)
    end

    return out
  else
    return tostring(n.subtype)
  end

  assert(false)
end
%    \end{macrocode}
%
% \subsubsection{template}
%
%    \begin{macrocode}
function template.color_code(code)
  return string.char(27) .. '[' .. tostring(code) .. 'm'
end
%    \end{macrocode}
%
%    \begin{macrocode}
function template.color(color, mode)
  local out = ''
  local code

  if mode == 'bright' then
    out = template.color_code(1)
  elseif mode == 'dim' then
    out = template.color_code(2)
  end

  if color == 'reset' then code = 0
  elseif color == 'red' then code = 31
  elseif color == 'green' then code = 32
  elseif color == 'yellow' then code = 33
  elseif color == 'blue' then code = 34
  elseif color == 'magenta' then code = 35
  elseif color == 'cyan' then code = 36
  else code = 37 end

  return out .. template.color_code(code)
end
%    \end{macrocode}
%
%    \begin{macrocode}
function template.key_value(key, value)
  return template.color('yellow') .. key .. ': ' .. template.color('white') .. value .. '; ' .. template.color('reset')
end
%    \end{macrocode}
%
%    \begin{macrocode}
function template.length(input)
  input = tonumber(input)
  input = input / 2^16
  input = math.floor((input * 10^2) + 0.5) / (10^2)
  return string.format('%gpt', input)
end
%    \end{macrocode}
%
%    \begin{macrocode}
function template.char(input)
  return string.format('%q', unicode.utf8.char(input))
end
%    \end{macrocode}
%
% t = type
%    \begin{macrocode}
function template.type(t, id)
  local out = ''
  out = template.type_color(t) .. string.upper(t)

  if options.verbosity > 1 then
    out = out .. template.type_id(id)
  end

  return out .. template.color('reset')  .. ' '
end
%    \end{macrocode}
%
%    \begin{macrocode}
function template.type_id(id)
  return '[' .. tostring(id) .. ']'
end
%    \end{macrocode}
%
%    \begin{macrocode}
function template.branch(connection_type, connection_state, last)
  local c = connection_type
  local s = connection_state
  local l = last
  if c == 'list' and s == 'stop' and l == false then
    return ' '
  elseif c == 'field' and s == 'stop' and l == false then
    return ' '
  elseif c == 'list' and s == 'continue' and l == false then
    return '│ '
  elseif c == 'field' and s == 'continue' and l == false then
    return '║ '
  elseif c == 'list' and s == 'continue' and l == true then
    return '├─'
  elseif c == 'field' and s == 'continue' and l == true then
    return '╠═'
  elseif c == 'list' and s == 'stop' and l == true then
    return '└─'
  elseif c == 'field' and s == 'stop' and l == true then
    return '╚═'
  end
end
%    \end{macrocode}

%    \begin{macrocode}
function template.branches(level, connection_type)
  local out = ''

  for i = 1, level - 1  do
    out = out .. template.branch('list', tree.state[i]['list'], false)
    out = out .. template.branch('field', tree.state[i]['field'], false)
  end
%    \end{macrocode}
% Format the last branches
%    \begin{macrocode}
  if connection_type == 'list' then
    out = out .. template.branch('list', tree.state[level]['list'], true)
  else
    out = out .. template.branch('list', tree.state[level]['list'], false)
    out = out .. template.branch('field', tree.state[level]['field'], true)
  end

  return out
end
%    \end{macrocode}
%
%    \begin{macrocode}
template.node_colors = {
  hlist          = template.color('red'),
  vlist          = template.color('green'),
  rule           = template.color('yellow'),
  ins            = template.color('blue'),
  mark           = template.color('magenta'),
  adjust         = template.color('cyan'),
  boundary       = template.color('red', 'bright'),
  disc           = template.color('green', 'bright'),
  whatsit        = template.color('yellow', 'bright'),
  local_par      = template.color('blue', 'bright'),
  dir            = template.color('magenta', 'bright'),
  math           = template.color('cyan', 'bright'),
  glue           = template.color('red'),
  kern           = template.color('green'),
  penalty        = template.color('yellow'),
  unset          = template.color('blue'),
  style          = template.color('magenta'),
  choice         = template.color('cyan'),
  noad           = template.color('red'),
  radical        = template.color('green'),
  fraction       = template.color('yellow'),
  accent         = template.color('blue'),
  fence          = template.color('magenta'),
  math_char      = template.color('cyan'),
  sub_box        = template.color('red', 'bright'),
  sub_mlist      = template.color('green', 'bright'),
  math_text_char = template.color('yellow', 'bright'),
  delim          = template.color('blue', 'bright'),
  margin_kern    = template.color('magenta', 'bright'),
  glyph          = template.color('cyan', 'bright'),
  align_record   = template.color('red'),
  pseudo_file    = template.color('green'),
  pseudo_line    = template.color('yellow'),
  page_insert    = template.color('blue'),
  split_insert   = template.color('magenta'),
  expr_stack     = template.color('cyan'),
  nested_list    = template.color('red'),
  span           = template.color('green'),
  attribute      = template.color('yellow'),
  glue_spec      = template.color('magenta'),
  attribute_list = template.color('cyan'),
  temp           = template.color('magenta'),
  align_stack    = template.color('red', 'bright'),
  movement_stack = template.color('green', 'bright'),
  if_stack       = template.color('yellow', 'bright'),
  unhyphenated   = template.color('magenta', 'bright'),
  hyphenated     = template.color('cyan', 'bright'),
  delta          = template.color('red'),
  passive        = template.color('green'),
  shape          = template.color('yellow'),
}
%    \end{macrocode}
%
%    \begin{macrocode}
function template.type_color(id)
  return  template.node_colors[id]
end
%    \end{macrocode}
%
%    \begin{macrocode}
function template.print(text)
  print(text)
end
%    \end{macrocode}
%
% \subsubsection{tree}
%
%    \begin{macrocode}
function tree.format_field(head, field)
  local out = ''

  if not head[field] or head[field] == 0 then
    return ''
  end

  if options.verbosity < 2 and field == 'prev' or field == 'next' or field == 'id' or field == 'attr' then
    return ''
  end

  if field == 'prev' or field == 'next' then
    out = nodex.node_id(head[field])
  elseif field == 'subtype' then
    out = nodex.subtype(head)
  elseif field == 'width' or field == 'height' or field == 'depth' then
    out = template.length(head[field])
  elseif field == 'char' then
    out = template.char(head[field])
  else
    out = tostring(head[field])
  end

  return template.key_value(field, out)
end
%    \end{macrocode}
%
% |level| is a integer beginning with 1. The variable |connection_type|
% is a string, which can be either |list| or |field|. The variable
% |connection_state| is a string, which can be either |continue| or
% |stop|.
%    \begin{macrocode}
function tree.set_state(level, connection_type, connection_state)
  if not tree.state[level] then
    tree.state[level] = {}
  end
  tree.state[level][connection_type] = connection_state
end
%    \end{macrocode}
%
%    \begin{macrocode}
function tree.analyze_node(head, level)
  local out = {}
  local connection_state

  out = template.type(node.type(head.id), head.id)

  if options.verbosity > 1 then
    out = out .. template.key_value('no', nodex.node_id(head))
  end

  local tmp = {}
  local r = {} -- recurison

  fields = node.fields(head.id, head.subtype)

  for field_id, field_name in pairs(fields) do
    if field_name ~= 'next' and
      field_name ~= 'prev' and
      field_name ~= 'attr' and
      node.is_node(head[field_name]) then
      r[field_name] = head[field_name]
    else
      tmp[#tmp + 1] = tree.format_field(head, field_name)
    end
  end

  if head.next then
    connection_state = 'continue'
  else
    connection_state = 'stop'
  end

  tree.set_state(level, 'list', connection_state)
  template.print(template.branches(level, 'list') .. out .. table.concat(tmp, ''))

  local max = 0
  for _ in pairs(r) do
    max = max + 1
  end

  local count = 0
  for field_name, recursion_node in pairs(r) do
    count = count + 1
    if count == max then
      connection_state = 'stop'
    else
      connection_state = 'continue'
    end

    tree.set_state(level, 'field', connection_state)
    template.print(template.branches(level, 'field') .. field_name .. ':')
    tree.analyze_list(recursion_node, level + 1)
  end

end
%    \end{macrocode}
%
%    \begin{macrocode}
function tree.analyze_list(head, level)
  while head do
    tree.analyze_node(head, level)
    head = head.next
  end
end
%    \end{macrocode}
%
%    \begin{macrocode}
function tree.analyze(head)
  print('\n')
  print(base.get_callback() .. ':\n│')
  tree.analyze_list(head, 1)
  return head
end
%    \end{macrocode}
%
%    \begin{macrocode}
local callbacks = {}
function callbacks.post_linebreak_filter(head, groupcode)
  template.print('post_linebreak_filter')
  if groupcode then
    print('groundcode: ' .. groupcode)
  end
  tree.analyze_list(head, 1)
  return true
end
%    \end{macrocode}
%
% \subsubsection{base}
%
%    \begin{macrocode}
function base.get_callback()
  local key = options.callback
  local callback
  if key == 'prelinebreak' then callback = 'pre_linebreak_filter'
  elseif key == 'linebreak' then callback = 'linebreak_filter'
  elseif key == 'postlinebreak' then callback = 'post_linebreak_filter'
  elseif key == 'hpack' then callback = 'hpack_filter'
  elseif key == 'vpack' then callback = 'vpack_filter'
  elseif key == 'hyphenate' then callback = 'hyphenate'
  elseif key == 'ligaturing' then callback = 'ligaturing'
  elseif key == 'kerning' then callback = 'kerning'
  elseif key == 'mhlist' then callback = 'mlist_to_hlist'
  else callback = 'post_linebreak_filter'
  end

  return callback
end
%    \end{macrocode}
%
%    \begin{macrocode}
function base.set_options(localoptions)
  if not localoptions then
    localoptions = {}
  end
  options = localoptions
  local defaults = {
    verbosity = 1,
    channel = 'term',
    callback = 'postlinebreak',
    engine = 'luatex',
  }
  for key, value in pairs(defaults) do
    if not options[key] then
      options[key] = value
    end
  end
  options.verbosity = tonumber(options.verbosity)
end
%    \end{macrocode}
%
%    \begin{macrocode}
function base.execute()
  local c = base.get_callback()
  if options.engine == 'lualatex' then
    luatexbase.add_to_callback(c, callbacks.post_linebreak_filter, 'tree')
  else
    id, error = callback.register(c, callbacks.post_linebreak_filter)
  end
end
%    \end{macrocode}
%
%    \begin{macrocode}
function base.analyze(head)
  tree.analyze_list(head, 1)
end
%    \end{macrocode}
%
%    \begin{macrocode}
return base
%    \end{macrocode}
% \iffalse
%</luamain>
% \fi
%
% \Finale
\endinput
