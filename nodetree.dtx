% \iffalse meta-comment
%
% Copyright (C) 2016-2020 by Josef Friedrich <josef@friedrich.rocks>
% ----------------------------------------------------------------------
% This work may be distributed and/or modified under the conditions of
% the LaTeX Project Public License, either version 1.3 of this license
% or (at your option) any later version.  The latest version of this
% license is in:
%
%   http://www.latex-project.org/lppl.txt
%
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% This work has the LPPL maintenance status `maintained'.
%
% The Current Maintainer of this work is Josef Friedrich.
%
% This work consists of the files nodetree.dtx and nodetree.ins
% and the derived filebase nodetree.sty and nodetree.lua.
%
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{nodetree.dtx}
%</driver>
%<package>\NeedsTeXFormat{LaTeX2e}[1999/12/01]
%<package>\ProvidesPackage{nodetree}
%<*package>
    [2016/07/18 v1.2 Visualize node lists in a tree view]
%</package>
%<*driver>
\documentclass{ltxdoc}
\usepackage{paralist,fontspec,graphicx,fancyvrb}
\usepackage[
  colorlinks=true,
  linkcolor=red,
  filecolor=red,
  urlcolor=red,
]{hyperref}
\usepackage[theme=molokai,thememode=dark]{nodetree-embed}
\EnableCrossrefs
\CodelineIndex
\RecordChanges

\usepackage{minted}
\usemintedstyle{colorful}
\BeforeBeginEnvironment{minted}{\begin{mdframed}[backgroundcolor=gray!3]}
\AfterEndEnvironment{minted}{\end{mdframed}}
\setminted{
  breaklines=true,
  fontsize=\footnotesize,
}

\def\TmpLuaCodeInline#1{\texttt{\scantokens{\catcode`\_=12\relax#1}}}

\def\secref#1{(\rightarrow\ \ref{#1})}

\newcommand{\TmpGraphics}[1]{
  \noindent
  \includegraphics[scale=0.4]{graphics/#1}
}


\newcommand{\TmpExample}[1]{
\begin{NodetreeExample}
\input{examples/#1.nttex}
\end{NodetreeExample}
}

\newcommand{\TmpVerbExample}[1]{
\VerbatimInput[frame=single,fontsize=\footnotesize,firstline=4]{examples/#1.tex}
\TmpExample{#1}
}

\DefineVerbatimEnvironment{code}{Verbatim}
{
  frame=single,
  fontsize=\footnotesize,
}

\newcommand{\TmpLuaFunction}[1]{
  \marginpar{%
    \raggedleft%
    \MacroFont%
    \texttt{%
      \scantokens{\catcode`\_=12\relax#1}%
    }%
  }%
}

\begin{document}

\providecommand*{\url}{\texttt}
\GetFileInfo{nodetree.dtx}
\title{The \textsf{nodetree} package}
\author{%
  Josef Friedrich\\%
  \url{josef@friedrich.rocks}\\%
  \href{https://github.com/Josef-Friedrich/nodetree}{github.com/Josef-Friedrich/nodetree}%
}
\date{\fileversion~from \filedate}

\maketitle

\begin{NodetreeExample}[fontsize=\footnotesize]
\input{examples/packagename.nttex}
\end{NodetreeExample}

\newpage

\tableofcontents

\newpage

%-----------------------------------------------------------------------
% Abstract
%-----------------------------------------------------------------------

\section{Abstract}

|nodetree| is a development package that visualizes the structure of
node lists. |nodetree| shows its debug informations in the consoles’
output when you compile a Lua\TeX{} file. It uses a similar visual
representation for node lists as the UNIX |tree| command does for a
folder tree.

Node lists are the main building blocks of each document generated by
the \TeX{} engine \emph{Lua\TeX}. The package |nodetree| doesn‘t change
the rendered document. The tree view can only be seen when using a
terminal to generate the document.

|nodetree| is inspired by a
\href{https://gist.github.com/pgundlach/556247}
{gist from Patrick Gundlach}.

%-----------------------------------------------------------------------
% Usage
%-----------------------------------------------------------------------

\section{Usage}

The package |nodetree| has three usage scenarios.
It can be used as a standalone Lua module, as a plain Lua\TeX{} or a
Lua\LaTeX{} package.

%%
%
%%

\subsection{As a plain Lua\TeX{} package}

Run |luatex luatex-test.tex| for example to list the nodes using
Lua\TeX{}.

\begin{minted}{latex}
\input{nodetree.tex}
\NodetreeRegisterCallback{postline}

Lorem ipsum dolor.
\bye
\end{minted}

%%
%
%%

\subsection{As a Lua\LaTeX{} package}

Or run |lualatex lualatex-test.tex| to show a node tree using
Lua\LaTeX{}. In Lua\LaTeX{} you can omit |\NodetreeRegisterCallback{postline}|.
|\usepackage{nodetree}| registers automatically the
|post_linebreak_filter|. If you don’t want debug the
|post_linebreak_filter| use |\NodetreeUnregisterCallback{postline}|.

\begin{minted}{latex}
\documentclass{article}
\usepackage{nodetree}

\begin{document}
Lorem ipsum dolor.
\end{document}
\end{minted}

%%
% inside Lua code
%%

\subsection{As a Lua module}

Import the Lua module of the package inside
\mintinline{latex}{\directlua{}}
with this command:
\mintinline{lua}{local nodetree = require('nodetree')}.
Then use the Lua function
\mintinline{lua}{nodetree.print(head, options)}
to debug nodes inside your Lua code.

\begin{minted}{lua}
local nodetree = require('nodetree')

local rule1 = node.new('rule')
rule1.width  = 20 * 65536
rule1.height = 10 * 65536
rule1.depth  = 10 * 65536
nodetree.print(vbox)
\end{minted}

\noindent
The function \mintinline{lua}{nodetree.print()} takes as a second
argument a Lua table to configure the output.

\begin{minted}{lua}
nodetree.print(vbox, { verbosity = 2, unit = 'cm' })
\end{minted}

\noindent
This are the default options:

\begin{minted}{lua}
options =  {
  verbosity = 1,
  callback = 'post_linebreak_filter',
  engine = 'luatex',
  color = 'colored',
  decimalplaces = 2,
  unit = 'pt',
  channel = 'term'
}
\end{minted}

\noindent
The following code snippet demonstrates the usage in Lua\TeX{}.
|head| is the current node.

\begin{minted}{latex}
  \directlua{
  local nodetree = require('nodetree')
  local test = function (head)
    nodetree.print(head)
  end
  callback.register('post_linebreak_filter', test)
}

Lorem ipsum dolor.
\bye
\end{minted}

\noindent
This example illustrates how the function has to be applied in
Lua\LaTeX{}.

\begin{minted}{latex}
\documentclass{article}
\usepackage{nodetree}

\begin{document}

\directlua{
  local nodetree = require('nodetree')
  local test = function (head)
    nodetree.print(head)
  end
  luatexbase.add_to_callback('post_linebreak_filter', test, 'test')
}

Lorem ipsum dolor.
\end{document}
\end{minted}

\subsection{The package nodetree-embed}

The single purpose of this auxilliary package is to provide a termial
like view that mimiks the output of nodetree in a terminal and that
can be embeded in a Lua\LaTeX file. You have to compile documents
using this embeded view with the option --shell-escape. The main
environment is NodetreeEmbed. Markup inside this environment is
written into a temporary \LaTeX file. This file is compiled in the
background and the nodetree output is embded into this view.

%-----------------------------------------------------------------------
% Macros
%-----------------------------------------------------------------------

\section{Macros}

%%
% \NodetreeRegisterCallback
%%

\subsection{\cmd{\NodetreeRegisterCallback}}

\DescribeMacro{\NodetreeRegisterCallback}
\cmd{\NodetreeRegisterCallback}\marg{callbacks}: The argument \marg{callbacks}
takes a comma separated list of callback aliases as described in
\secref{sec:option-callback}.

%%
% \NodetreeUnregisterCallback
%%

\subsection{\cmd{\NodetreeUnregisterCallback}}

\DescribeMacro{\NodetreeUnregisterCallback}
\cmd{\NodetreeUnregisterCallback}\marg{callbacks}: The argument \marg{callbacks}
takes a comma separated list of callback aliases as described in
\secref{sec:option-callback}.

%%
% \NodetreeSetOption
%%

\subsection{\cmd{\NodetreeSetOption}}

\DescribeMacro{\NodetreeSetOption}
\cmd{\NodetreeSetOption}\oarg{option}\marg{value}: \secref{sec:options}
This macro sets the option \oarg{option} to the value \marg{value}.

%%
% \NodetreeSet
%%

\subsection{\cmd{\NodetreeSet}}

\DescribeMacro{\NodetreeSet}
\cmd{\NodetreeSet}\marg{kv-options}:
This macro can only be used in Lua\LaTeX{}. \marg{kv-options} are key
value pairs.

\begin{code}
\NodetreeSet{color=no,callbacks={hpack,vpack},verbosity=2}
\end{code}

%-----------------------------------------------------------------------
% Options
%-----------------------------------------------------------------------

\section{Options}
\label{sec:options}

%%
% callback
%%

\subsection{Option \texttt{callback}}
\label{sec:option-callback}

The option |callback| is the most important setting of the package. It
is possible to specify an alias to select the |callback|. Take a look
the overview of callbacks (\rightarrow{} Figure \ref{fig:callback}).
|nodetree| supports all node related callbacks as listed in the
Lua\TeX reference manual.

This macros process callback options:
\cmd{\NodetreeRegisterCallback}\marg{callbacks},
\cmd{\NodetreeUnregisterCallback}\marg{callbacks},
\cmd{\NodetreeSet}\marg{callback=<callbacks>} and
\cmd{\usepackage}\oarg{callback=<callbacks>}\marg{nodetree}.

Use commas to specify mulitple callbacks. Avoid using whitespaces:

\begin{code}
\NodetreeRegisterCallback{preline,line,postline}
\end{code}

Wrap your callback aliases in curly braces for the macro |\NodetreeSet|:

\begin{code}
\NodetreeSet{callback={preline,line,postline}}
\end{code}

The same applies for the macro |\usepackage|:

\begin{code}
\usepackage{callback={preline,line,postline}}
\end{code}

%%
% Tabular callbacks
%%

\newcommand{\TmpCallbackRow}[3]{
  \TmpLuaCodeInline{#1} & \TmpLuaCodeInline{#2} & \TmpLuaCodeInline{\footnotesize#3} \\
}

\begin{figure}
The callbacks are listed in the same order as in the Lua\TeX reference
manual.

\noindent
\begin{tabular}{lll}
\textbf{Callback} & \textbf{Alias} & \textbf{Alias (longer)} \\
\TmpCallbackRow{contribute_filter}
{contribute}
{contributefilter}

\TmpCallbackRow{buildpage_filter}
{buildfilter} %
{buildpagefilter}

% new
\TmpCallbackRow{build_page_insert}
{buildinsert}
{buildpageinsert}

\TmpCallbackRow{pre_linebreak_filter}
{preline}
{prelinebreakfilter}

\TmpCallbackRow{linebreak_filter}
{line}
{linebreakfilter}

\TmpCallbackRow{append_to_vlist_filter}
{append}
{appendtovlistfilter}

\TmpCallbackRow{post_linebreak_filter}
{postline}
{postlinebreakfilter}

\TmpCallbackRow{hpack_filter}
{hpack}
{hpackfilter}

\TmpCallbackRow{vpack_filter}
{vpack}
{vpackfilter}

\TmpCallbackRow{hpack_quality}
{hpackq}
{hpackquality}

\TmpCallbackRow{vpack_quality}
{vpackq}
{vpackquality}

\TmpCallbackRow{process_rule}
{process}
{processrule}

\TmpCallbackRow{pre_output_filter}
{preout}
{preoutputfilter}

\TmpCallbackRow{hyphenate}
{hyph}
{}

\TmpCallbackRow{ligaturing}
{liga}
{}

\TmpCallbackRow{kerning}
{kern}
{}

\TmpCallbackRow{insert_local_par}
{insert}
{insertlocalpar}

\TmpCallbackRow{mlist_to_hlist}
{mhlist}
{mlisttohlist}
\end{tabular}

\caption{The callback aliases}
\label{fig:callback}
\end{figure}

%%
% channel
%%

\subsection{Option \texttt{channel}}
\label{sec:option-channel}

You can select the debug output channel with this option. The default
value for the option |channel| is |term| which displays the node tree in
the current terminal. Specify |log| and the package creates a log file
named |jobname_nodetree.log|. |jobname| is the name of your file you
want to debug.

%%
% verbosity
%

\subsection{Option \texttt{verbosity}}

Higher integer values result in a more verbose output. The default value
for this options is |1|. At the moment only verbosity level |2| is
implemented.

\subsubsection{Example \texttt{verbosity=1}}

\NodetreeTerminalEmulator{examples/option_verbosity-1}

\subsubsection{Example \texttt{verbosity=2}}

\NodetreeTerminalEmulator{examples/option_verbosity-2}

\subsubsection{Example \texttt{verbosity=3}}

\NodetreeTerminalEmulator{examples/option_verbosity-3}

%%
% color
%%

\subsection{Option \texttt{color}}

The default option for |color| is |colored|. Use any other string (for
example |none| or |no|) to disable the colored terminal output of the
package.

\begin{code}
\usepackage[color=no]{nodetree}
\end{code}

%%
% unit
%%

\subsection{Option \texttt{unit}}

The option |unit| sets the length unit to display all length values of
the nodes. The default option for |unit| is |pt|. See figure
\ref{fig:fixed-units} and \ref{fig:relative-units} for possible values.

\begin{figure}
\begin{tabular}{lp{10cm}}
\textbf{Unit} &
\textbf{Description} \\

pt &
Point 1/72.27 inch. The conversion to metric units, to two decimal
places, is 1 point = 2.85 mm = 28.45 cm. \\

pc &
Pica, 12 pt \\

in &
Inch, 72.27 pt \\

bp &
Big point, 1/72 inch. This length is the definition of a point in
PostScript and many desktop publishing systems. \\

cm &
Centimeter \\

mm &
Millimeter \\

dd &
Didot point, 1.07 pt \\

cc &
Cicero, 12 dd \\

sp &
Scaled point, 1/65536 pt \\
\end{tabular}
\caption{Fixed units}
\label{fig:fixed-units}
\end{figure}

\begin{figure}
\begin{tabular}{lp{10cm}}
\textbf{Unit} &
\textbf{Description} \\

ex &
x-height of the current font \\

em &
Width of the capital letter M \\
\end{tabular}
\caption{Relative units}
\label{fig:relative-units}
\end{figure}


\NodetreeTerminalEmulator{examples/option_unit-pt}
\NodetreeTerminalEmulator{examples/option_unit-sp}
\NodetreeTerminalEmulator{examples/option_unit-cm}

%%
% decimalplaces
%%

\subsection{Option \texttt{decimalplaces}}

The options |decimalplaces| sets the number of decimal places for some
node fields.

\begin{code}
\NodetreeSetOption[decimalplaces]{4}
\end{code}

gets

\begin{code}
├─GLYPH char: "a"; width: 5pt; height: 4.3055pt;
\end{code}

If |decimalplaces| is set to |0| only integer values are shown.

\begin{code}
├─GLYPH char: "a"; width: 5pt; height: 4pt;
\end{code}

%%
% theme and thememode
%%

\newcommand{\TmpExampleTheme}[2]{
  \subsubsection{Example \texttt{theme=#1} \texttt{thememode=#2}}
  \NodetreeTerminalEmulator[theme=#1,thememode=#2]{examples/minimal}
}

\subsection{Option \texttt{theme} and \texttt{thememode}}

% bw
\TmpExampleTheme{bwdark}{dark}
\TmpExampleTheme{bwlight}{light}

% terminalapp
\TmpExampleTheme{terminalapp}{dark}
\TmpExampleTheme{terminalapp}{light}

% xterm
\TmpExampleTheme{xterm}{dark}
\TmpExampleTheme{xterm}{light}

% smyck
\TmpExampleTheme{smyck}{dark}
\TmpExampleTheme{smyck}{light}

% molokai
\TmpExampleTheme{molokai}{dark}
\TmpExampleTheme{molokai}{light}

% monokaisoda
\TmpExampleTheme{monokaisoda}{dark}
\TmpExampleTheme{monokaisoda}{light}

\NodetreeReset

%%
% font
%%

\subsection{Option \texttt{font}}

\NodetreeSet{fontsize=\small}

\newcommand{\TmpExampleFont}[1]{
  \subsubsection{Example \texttt{font=\{#1\}}}
  \NodetreeTerminalEmulator[font={#1}]{examples/minimal}
}

\TmpExampleFont{FreeMono}
\TmpExampleFont{Liberation Mono}
\TmpExampleFont{DejaVu Sans Mono}
\TmpExampleFont{Ubuntu Mono}


\NodetreeReset

%%
% fontsize
%%

\subsection{Option \texttt{fontsize}}

\string\small

\NodetreeTerminalEmulator[fontsize=\small]{examples/minimal}

\string\tiny

\NodetreeTerminalEmulator[fontsize=\tiny]{examples/minimal}

\NodetreeReset

%-----------------------------------------------------------------------
% Visual tree structure
%-----------------------------------------------------------------------

\section{Visual tree structure}

%%
% Two different connections
%%

\subsection{Two different connections}

Nodes in Lua\TeX{} are connected. The |nodetree| package distinguishs
between the |list| and |field| connections.

\begin{itemize}
 \item |list|: Nodes, which are double connected by |next| and
       |previous| fields.
 \item |field|: Connections to nodes by other fields than |next| and
       |previous| fields, e. g. |head|, |pre|.
\end{itemize}

%%
% Unicode characters
%%

\subsection{Unicode characters to show the tree view}

\renewcommand{\arraystretch}{1.5}

The package |nodetree| uses the unicode box drawing symbols. Your
default terminal font should contain this characters to obtain the tree
view. Eight box drawing characters are necessary.


{
\fontspec{DejaVu Sans Mono}
\noindent
\begin{tabular}{lcl}
\textbf{Code} & \textbf{Character} & \textbf{Name} \\
U+2500 & ─ & BOX DRAWINGS LIGHT HORIZONTAL \\
U+2502 & │ & BOX DRAWINGS LIGHT VERTICAL \\
U+2514 & └ & BOX DRAWINGS LIGHT UP AND RIGHT \\
U+251C & ├ & BOX DRAWINGS LIGHT VERTICAL AND RIGHT \\
U+2550 & ═ & BOX DRAWINGS DOUBLE HORIZONTAL \\
U+2551 & ║ & BOX DRAWINGS DOUBLE VERTICAL \\
U+255A & ╚ & BOX DRAWINGS DOUBLE UP AND RIGHT \\
U+2560 & ╠ & BOX DRAWINGS DOUBLE VERTICAL AND RIGHT \\
\end{tabular}
}

\noindent
For |list| connections \emph{light} characters are shown.

{
\setmonofont{DejaVu Sans Mono}
\begin{code}
│ │
│ ├─list1
│ └─list2
└─list3
\end{code}
}

\noindent
|field| connections are visialized by \emph{Double} characters.

{
\setmonofont{DejaVu Sans Mono}
\begin{code}
║ ║
║ ╠═field1
║ ╚═field2
╚═field3
\end{code}
}

%-----------------------------------------------------------------------
% Examples
%-----------------------------------------------------------------------

\section{Examples}

%%
% packagename
%%

\subsection{The node list of the package name}

\TmpVerbExample{packagename}

%%
% math
%%

\subsection{The node list of a mathematical formula}

\TmpVerbExample{math}

%%
% ligatures
%%

\subsection{The node list of the word \emph{Office}}

The characters \emph{ffi} are deeply nested in a discretionary node.

\TmpVerbExample{ligatures}

%-----------------------------------------------------------------------
% Node types
%-----------------------------------------------------------------------

\subsection{Node types}

\newcommand{\TmpNodeTypeSub}[4]{
  \subsubsection{Type: #1(#2) Subtype: #3(#4)}
  \TmpVerbExample{#2#1#4#3}
}

\newcommand{\TmpNodeType}[2]{
  \subsubsection{Type: #1(#2)}
  \TmpVerbExample{#2#1}
}

\TmpNodeTypeSub{hlist}{0}{line}{1}
\TmpNodeTypeSub{hlist}{0}{box}{2}
\TmpNodeTypeSub{hlist}{0}{indent}{3}
\TmpNodeType{vlist}{1}
\TmpNodeType{rule}{2}
\TmpNodeType{mark}{4}
\TmpNodeTypeSub{disc}{7}{discretionary}{0}
\TmpNodeTypeSub{disc}{7}{regular}{3}
\TmpNodeTypeSub{whatsit}{8}{pdfaction}{22}
\TmpNodeTypeSub{whatsit}{8}{pdfcolorstack}{28}
\TmpNodeTypeSub{glue}{12}{baselineskip}{2}
\TmpNodeTypeSub{glue}{12}{parskip}{3}
\TmpNodeTypeSub{glue}{12}{spaceskip}{13}
\TmpNodeTypeSub{glue}{12}{leaders}{100}
\TmpNodeTypeSub{glue}{12}{cleaders}{101}
\TmpNodeTypeSub{glue}{12}{xleaders}{102}
\TmpNodeTypeSub{kern}{13}{userkern}{0}
\TmpNodeTypeSub{kern}{13}{fontkern}{1}
\TmpNodeTypeSub{kern}{13}{accentkern}{2}
\TmpNodeTypeSub{kern}{13}{italiccorrection}{3}
\TmpNodeType{penalty}{14}
\TmpNodeType{glyph}{29}
\TmpNodeType{attribute}{38}
\TmpNodeType{attributelist}{40}

%-----------------------------------------------------------------------
% Index
%-----------------------------------------------------------------------

  \DocInput{nodetree.dtx}
  \pagebreak
  \PrintChanges
  \pagebreak
  \PrintIndex
\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \changes{v0.1}{2015/06/16}{Converted to DTX file}
% \changes{v1.0}{2016/07/07}{Inital release}
% \changes{v1.1}{2016/07/13}{Fix the registration of same callbacks}
% \changes{v1.2}{2016/07/18}{Fix difference between README.md in the upload and that from nodetree.dtx}
%
% \DoNotIndex{\newcommand,\newenvironment,\def,\directlua}
%
% \StopEventually{}
% \pagebreak
% \section{Implementation}
%
% \iffalse
%<*tex>
% \fi
% \MacroTopsep = 10pt plus 2pt minus 2pt
% \MacrocodeTopsep = 10pt plus 1.2pt minus 1pt
% \makeatletter
% \c@CodelineNo 25 \relax
% \makeatother
%
% \subsection{The file \tt{nodetree.tex}}
%
%    \begin{macrocode}
\directlua{
  nodetree = require('nodetree')
  nodetree.set_option('engine', 'luatex')
}
%    \end{macrocode}
%
% \begin{macro}{\NodetreeSetOption}
%    \begin{macrocode}
\def\NodetreeSetOption[#1]#2{
  \directlua{
    nodetree.set_option('#1', '#2')
  }
}
\let\nodetreeoption\NodetreeSetOption
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\NodetreeRegisterCallback}
%    \begin{macrocode}
\def\NodetreeRegisterCallback#1{
  \directlua{
    nodetree.set_option('callback', '#1')
    nodetree.register_callbacks()
  }
}
\let\nodetreeregister\NodetreeRegisterCallback
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\NodetreeUnregisterCallback}
%    \begin{macrocode}
\def\NodetreeUnregisterCallback#1{
  \directlua{
    nodetree.set_option('callback', '#1')
    nodetree.unregister_callbacks()
  }
}
\let\nodetreeunregister\NodetreeUnregisterCallback
%    \end{macrocode}
% \end{macro}
%
% \iffalse
%</tex>
%<*package>
% \fi
% \makeatletter
% \c@CodelineNo 25 \relax
% \makeatother
%
% \subsection{The file \tt{nodetree.sty}}
%
%    \begin{macrocode}
\input{nodetree}
\directlua{
  nodetree.set_option('engine', 'lualatex')
}
%    \end{macrocode}
%
%    \begin{macrocode}
\RequirePackage{kvoptions}
%    \end{macrocode}
%
%    \begin{macrocode}
\SetupKeyvalOptions{
  family=NT,
  prefix=NTK@
}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareStringOption[term]{channel}
\define@key{NT}{channel}[]{\NodetreeSetOption[channel]{#1}}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareStringOption[postlinebreak]{callback}
\define@key{NT}{callback}[]{\NodetreeSetOption[callback]{#1}}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareStringOption[1]{verbosity}
\define@key{NT}{verbosity}[]{\NodetreeSetOption[verbosity]{#1}}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareStringOption[colored]{color}
\define@key{NT}{color}[]{\NodetreeSetOption[color]{#1}}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareStringOption[1]{unit}
\define@key{NT}{unit}[]{\NodetreeSetOption[unit]{#1}}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareStringOption[1]{decimalplaces}
\define@key{NT}{decimalplaces}[]{\NodetreeSetOption[decimalplaces]{#1}}
%    \end{macrocode}
%
%    \begin{macrocode}
\ProcessKeyvalOptions{NT}
\directlua{
  nodetree.register_callbacks()
}
%    \end{macrocode}
%
% \iffalse
%</package>
%<*packageembed>
% \fi
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1994/06/01]
\ProvidesPackage{nodetree-embed}
  [2020/05/24 v1.2 Embed node trees into a LaTeX document]
%    \end{macrocode}
%
%    \begin{macrocode}
\RequirePackage{xcolor,mdframed,expl3,xparse,fontspec}
%    \end{macrocode}
%
%    \begin{macrocode}
\input{nodetree}
%    \end{macrocode}
%
%    \begin{macrocode}
\RequirePackage{kvoptions}
\SetupKeyvalOptions{
  family=NTE,
  prefix=NTEK@
}
%    \end{macrocode}
%
%    \begin{macrocode}
\directlua{
  nodetree = require('nodetree')
  nodetree.check_shell_escape()
  nodetree.set_option('engine', 'lualatex')
}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareStringOption[postlinebreak]{callback}
\define@key{NTE}{callback}[]{\NodetreeSetOption[callback]{#1}}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareStringOption[1]{verbosity}
\define@key{NTE}{verbosity}[]{\NodetreeSetOption[verbosity]{#1}}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareStringOption[colored]{color}
\define@key{NTE}{color}[]{\NodetreeSetOption[color]{#1}}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareStringOption[1]{unit}
\define@key{NTE}{unit}[]{\NodetreeSetOption[unit]{#1}}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareStringOption[1]{decimalplaces}
\define@key{NTE}{decimalplaces}[]{\NodetreeSetOption[decimalplaces]{#1}}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareStringOption[smyck]{theme}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareStringOption[dark]{thememode}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareStringOption[Ubuntu Mono]{font}
%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareStringOption[\footnotesize]{fontsize}
%    \end{macrocode}
%
%    \begin{macrocode}
\ProcessKeyvalOptions{NTE}
%    \end{macrocode}
%
% \begin{macro}{\NTE@colors}
%    \begin{macrocode}
\ExplSyntaxOn
\def\NTE@colors{
  \str_case_e:nn{\NTEK@theme}{
    {bwdark}{
      \definecolor{NTEblack}{gray}{0}
      \definecolor{NTEred}{gray}{1}
      \definecolor{NTEgreen}{gray}{1}
      \definecolor{NTEyellow}{gray}{1}
      \definecolor{NTEblue}{gray}{1}
      \definecolor{NTEmagenta}{gray}{1}
      \definecolor{NTEcyan}{gray}{1}
      \definecolor{NTEwhite}{gray}{1}
      \definecolor{NTEblackbright}{gray}{0}
      \definecolor{NTEredbright}{gray}{1}
      \definecolor{NTEgreenbright}{gray}{1}
      \definecolor{NTEyellowbright}{gray}{1}
      \definecolor{NTEbluebright}{gray}{1}
      \definecolor{NTEmagentabright}{gray}{1}
      \definecolor{NTEcyanbright}{gray}{1}
      \definecolor{NTEwhitebright}{gray}{1}
    }
    {bwlight}{
      \definecolor{NTEblack}{gray}{0}
      \definecolor{NTEred}{gray}{0}
      \definecolor{NTEgreen}{gray}{0}
      \definecolor{NTEyellow}{gray}{0}
      \definecolor{NTEblue}{gray}{0}
      \definecolor{NTEmagenta}{gray}{0}
      \definecolor{NTEcyan}{gray}{0}
      \definecolor{NTEwhite}{gray}{1}
      \definecolor{NTEblackbright}{gray}{0}
      \definecolor{NTEredbright}{gray}{0}
      \definecolor{NTEgreenbright}{gray}{0}
      \definecolor{NTEyellowbright}{gray}{0}
      \definecolor{NTEbluebright}{gray}{0}
      \definecolor{NTEmagentabright}{gray}{0}
      \definecolor{NTEcyanbright}{gray}{0}
      \definecolor{NTEwhitebright}{gray}{1}
    }
    {terminalapp}{
      \definecolor{NTEblack}{RGB}{0,0,0}
      \definecolor{NTEred}{RGB}{194,54,33}
      \definecolor{NTEgreen}{RGB}{37,188,36}
      \definecolor{NTEyellow}{RGB}{173,173,39}
      \definecolor{NTEblue}{RGB}{73,46,225}
      \definecolor{NTEmagenta}{RGB}{211,56,211}
      \definecolor{NTEcyan}{RGB}{51,187,200}
      \definecolor{NTEwhite}{RGB}{203,204,205}
      \definecolor{NTEblackbright}{RGB}{129,131,131}
      \definecolor{NTEredbright}{RGB}{252,57,31}
      \definecolor{NTEgreenbright}{RGB}{49,231,34}
      \definecolor{NTEyellowbright}{RGB}{234,236,35}
      \definecolor{NTEbluebright}{RGB}{88,51,255}
      \definecolor{NTEmagentabright}{RGB}{249,53,248}
      \definecolor{NTEcyanbright}{RGB}{20,240,240}
      \definecolor{NTEwhitebright}{RGB}{233,235,235}
    }
    {xterm}{
      \definecolor{NTEblack}{RGB}{0,0,0}
      \definecolor{NTEred}{RGB}{205,0,0}
      \definecolor{NTEgreen}{RGB}{0,205,0}
      \definecolor{NTEyellow}{RGB}{205,205,0}
      \definecolor{NTEblue}{RGB}{0,0,238}
      \definecolor{NTEmagenta}{RGB}{205,0,205}
      \definecolor{NTEcyan}{RGB}{0,205,205}
      \definecolor{NTEwhite}{RGB}{229,229,229}
      \definecolor{NTEblackbright}{RGB}{127,127,127}
      \definecolor{NTEredbright}{RGB}{255,0,0}
      \definecolor{NTEgreenbright}{RGB}{0,255,0}
      \definecolor{NTEyellowbright}{RGB}{255,255,0}
      \definecolor{NTEbluebright}{RGB}{92,92,255}
      \definecolor{NTEmagentabright}{RGB}{255,0,255}
      \definecolor{NTEcyanbright}{RGB}{0,255,255}
      \definecolor{NTEwhitebright}{RGB}{255,255,255}
    }
    {smyck}{
      \definecolor{NTEblack}{HTML}{212121}
      \definecolor{NTEred}{HTML}{C75646}
      \definecolor{NTEgreen}{HTML}{8EB33B}
      \definecolor{NTEyellow}{HTML}{D0B03C}
      \definecolor{NTEblue}{HTML}{72B3CC}
      \definecolor{NTEmagenta}{HTML}{C8A0D1}
      \definecolor{NTEcyan}{HTML}{218693}
      \definecolor{NTEwhite}{HTML}{B0B0B0}
      \definecolor{NTEblackbright}{HTML}{5D5D5D}
      \definecolor{NTEredbright}{HTML}{E09690}
      \definecolor{NTEgreenbright}{HTML}{CDEE69}
      \definecolor{NTEyellowbright}{HTML}{FFE377}
      \definecolor{NTEbluebright}{HTML}{9CD9F0}
      \definecolor{NTEmagentabright}{HTML}{FBB1F9}
      \definecolor{NTEcyanbright}{HTML}{77DFD8}
      \definecolor{NTEwhitebright}{HTML}{F7F7F7}
    }
    {molokai}{
      \definecolor{NTEblack}{HTML}{212121}
      \definecolor{NTEred}{HTML}{fa2573}
      \definecolor{NTEgreen}{HTML}{98e123}
      \definecolor{NTEyellow}{HTML}{dfd460}
      \definecolor{NTEblue}{HTML}{1080d0}
      \definecolor{NTEmagenta}{HTML}{8700ff}
      \definecolor{NTEcyan}{HTML}{43a8d0}
      \definecolor{NTEwhite}{HTML}{bbbbbb}
      \definecolor{NTEblackbright}{HTML}{555555}
      \definecolor{NTEredbright}{HTML}{f6669d}
      \definecolor{NTEgreenbright}{HTML}{b1e05f}
      \definecolor{NTEyellowbright}{HTML}{fff26d}
      \definecolor{NTEbluebright}{HTML}{00afff}
      \definecolor{NTEmagentabright}{HTML}{af87ff}
      \definecolor{NTEcyanbright}{HTML}{51ceff}
      \definecolor{NTEwhitebright}{HTML}{ffffff}
    }
    {monokaisoda}{
      \definecolor{NTEblack}{HTML}{1a1a1a}
      \definecolor{NTEred}{HTML}{f4005f}
      \definecolor{NTEgreen}{HTML}{98e024}
      \definecolor{NTEyellow}{HTML}{fa8419}
      \definecolor{NTEblue}{HTML}{9d65ff}
      \definecolor{NTEmagenta}{HTML}{f4005f}
      \definecolor{NTEcyan}{HTML}{58d1eb}
      \definecolor{NTEwhite}{HTML}{c4c5b5}
      \definecolor{NTEblackbright}{HTML}{625e4c}
      \definecolor{NTEredbright}{HTML}{f4005f}
      \definecolor{NTEgreenbright}{HTML}{98e024}
      \definecolor{NTEyellowbright}{HTML}{e0d561}
      \definecolor{NTEbluebright}{HTML}{9d65ff}
      \definecolor{NTEmagentabright}{HTML}{f4005f}
      \definecolor{NTEcyanbright}{HTML}{58d1eb}
      \definecolor{NTEwhitebright}{HTML}{f6f6ef}
    }
  }
  \str_case_e:nn{\NTEK@thememode}{
    {dark}{
      \definecolor{NTEbackground}{named}{NTEblack}
      \definecolor{NTEfont}{named}{NTEwhitebright}
    }
    {light}{
      \definecolor{NTEbackground}{named}{NTEwhitebright}
      \definecolor{NTEfont}{named}{NTEblack}
    }
  }
}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\NTE@fonts}
%    \begin{macrocode}
\def\NTE@fonts{
  \bfseries%
  \NTEK@fontsize%
  \setmonofont{\NTEK@font}%
  \ttfamily%
  \setlength{\parindent}{0pt}%
  \setlength{\parskip}{-0.9pt}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\NodetreeSet}
%    \begin{macrocode}
\newcommand{\NodetreeSet}[1]{%
  \setkeys{NTE}{#1}%
}
\let\nodetreeset\NodetreeSet
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\NodetreeReset}
%    \begin{macrocode}
\def\NodetreeReset{
  \NodetreeSet{theme=monokaisoda,thememode=dark,font={Ubuntu Mono},fontsize=\tiny}
}
\let\nodetreereset\NodetreeReset
%    \end{macrocode}
% \end{macro}
%
% \begin{environment}{NodetreeExample}
%    \begin{macrocode}
\newenvironment{NodetreeExample}[1][]{
  \setkeys{NTE}{#1}
  \NTE@colors
  \begin{mdframed}[
    linecolor=black,
    backgroundcolor=NTEbackground,
    fontcolor=NTEfont,
  ]%
  \NTE@fonts
}{
  \end{mdframed}%
}
%    \end{macrocode}
% \end{environment}
%
% \begin{macro}{\NodetreeTerminalEmulator}
%    \begin{macrocode}
\newcommand{\NodetreeTerminalEmulator}[2][]{
  \setkeys{NTE}{#1}
  \begin{NodetreeExample}
  \input{#2.nttex}
  \end{NodetreeExample}
}
\let\nodetreeterminalemulator\NodetreeTerminalEmulator
%    \end{macrocode}
% \end{macro}
%
% \begin{environment}{NodetreeEmbed}
%    \begin{macrocode}
\NewDocumentEnvironment { NodetreeEmbed } { O{} +b } {
  \begin{NodetreeExample}
    \directlua{
      nodetree = require('nodetree')
      nodetree.compile_include('\luaescapestring{\unexpanded{#2}}')
    }
  \end{NodetreeExample}
}{}
%    \end{macrocode}
% \end{environment}
%
\endinput
% \iffalse
%</packageembed>
% \fi
%
% \Finale
\endinput
